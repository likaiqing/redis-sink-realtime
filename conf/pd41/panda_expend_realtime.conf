# A single-node Flume configuration for HDFS
# Name the components on this agent
# @version:    160505:3
a1.sources  = r1
a1.sinks    = k1
a1.channels = c1


a1.sources.r1.type                  = com.lxw1234.flume17.TaildirSource
a1.sources.r1.positionFile          = /data/logs/flume/expend_realtime.json
a1.sources.r1.filegroups            = f2 f3
a1.sources.r1.filegroups.f2         = /data/logs/current/charge/2017.*/.*expendnew.log
a1.sources.r1.filegroups.f3         = /data/logs/current/charge/2017.*/.*charge.expendip.log
a1.sources.r1.batchSize             = 100
a1.sources.r1.backoffSleepIncrement = 10
a1.sources.r1.maxBackoffSleep       = 50
#a1.sources.r1.skipToEnd       = true

a1.sources.r1.interceptors                           = i2

# match interceptor (match target field)
a1.sources.r1.interceptors.i2.type                   = REGEX_EXTRACTOR_MULTI
a1.sources.r1.interceptors.i2.regex                  =^(.*?)    (.*?)   (.*?)   (.*?)   (.*?)   (.*?)   (.*?)   (.*?)   (.*?)   (.*?)   (.*?)   (.*?)   (.*?)$
a1.sources.r1.interceptors.i2.serializers            = s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14
a1.sources.r1.interceptors.i2.serializers.split      =\\t
a1.sources.r1.interceptors.i2.serializers.s1.name    = se_id
a1.sources.r1.interceptors.i2.serializers.s2.name    = app
a1.sources.r1.interceptors.i2.serializers.s3.name    = rid
a1.sources.r1.interceptors.i2.serializers.s4.name    = ce_id
a1.sources.r1.interceptors.i2.serializers.s5.name    = name
a1.sources.r1.interceptors.i2.serializers.s6.name    = quantity
a1.sources.r1.interceptors.i2.serializers.s7.name    = price
a1.sources.r1.interceptors.i2.serializers.s8.name    = total
a1.sources.r1.interceptors.i2.serializers.s9.name    = old
a1.sources.r1.interceptors.i2.serializers.s10.name    = new
a1.sources.r1.interceptors.i2.serializers.s11.name    = multi
a1.sources.r1.interceptors.i2.serializers.s12.name    = sign
a1.sources.r1.interceptors.i2.serializers.multi.new   = time par_date minute_field
a1.sources.r1.interceptors.i2.serializers.multi.par_date.type =org.apache.flume.interceptor.RegexExtractorInterceptorDateSerializer
a1.sources.r1.interceptors.i2.serializers.multi.par_date.pattern = yyyyMMdd
a1.sources.r1.interceptors.i2.serializers.multi.par_date.datetype =yyyy-MM-dd HH:mm:ss
a1.sources.r1.interceptors.i2.serializers.multi.minute_field.type =org.apache.flume.interceptor.RegexExtractorInterceptorDateSerializer
a1.sources.r1.interceptors.i2.serializers.multi.minute_field.pattern = HH:mm
a1.sources.r1.interceptors.i2.serializers.multi.minute_field.datetype =yyyy-MM-dd HH:mm:ss
a1.sources.r1.interceptors.i2.serializers.s13.name    = anchor_id
a1.sources.r1.interceptors.i2.serializers.s14.name    = ip



a1.sinks.k1.type             =com.pandatv.redis.sink.realtime.RedisSink

a1.sinks.k1.batchSize =100

a1.sinks.k1.redis=com.pandatv.redis.sink.realtime.RedisRealtimeSinkSerializer
a1.sinks.k1.redis.host=10.120.3.74
a1.sinks.k1.redis.port=6381
a1.sinks.k1.redis.pwd=

  a1.sinks.k1.serializer.incr=false
a1.sinks.k1.serializer.incrExpire=604800
a1.sinks.k1.serializer.incrKeyPrefix=rt_expend
a1.sinks.k1.serializer.incrKeyPreVar=${par_date}
a1.sinks.k1.serializer.incrKeyName=total total ${name} ${name}
##none代表没有,condition类同
a1.sinks.k1.serializer.incrKeySuffix=coin cnt coin cnt
##多个条件只支持&&和||，多个条件直接不可有空格，单个条件只支持header判断，不按要求如果写错均为false,可为none：无条件,==:eq,!=uq,~=:regex，=~：包含，!~：不包含
a1.sinks.k1.serializer.incrCondition=${app}!~star ${app}!~star ${app}!~star ${app}!~star
a1.sinks.k1.serializer.incrValue=${total} 1 ${total} 1
#每写一次key，需要修改哈希key对应的field
a1.sinks.k1.serializer.incrCascadHset=true



a1.sinks.k1.serializer.sadd=true
a1.sinks.k1.serializer.saddExpire=120
a1.sinks.k1.serializer.saddKeyPrefix=rt_expend
a1.sinks.k1.serializer.saddKeyPreVar=${minute_field}
a1.sinks.k1.serializer.saddKeyName=total base64.encode{name}
a1.sinks.k1.serializer.saddKeySuffix=uv uv
a1.sinks.k1.serializer.saddCondition=${app}!~star ${app}!~star
a1.sinks.k1.serializer.saddValue=${rid} ${rid}
#每写一次key，需要修改哈希key对应的field
a1.sinks.k1.serializer.saddCascadHset=true
a1.sinks.k1.serializer.saddHashKeyPreVar=${par_date}
#saddHashKeyPrefix也与本身key中的saddHashKeyPrefix保持一致
#a1.sinks.k1.serializer.saddHashKeyPrefix=rt_expend
##keyname,saddHashKeySuffix省略，与本身key中的name保持一致
#a1.sinks.k1.serializer.saddHashKeySuffix=


a1.sinks.k1.serializer.hincrby=true
a1.sinks.k1.serializer.hincrbyExpire=604800
a1.sinks.k1.serializer.hincrbyKeyPrefix=rt_expend
a1.sinks.k1.serializer.hincrbyKeyPreVar=${par_date}
a1.sinks.k1.serializer.hincrbyKeyName=total total base64.encode{name} base64.encode{name}
a1.sinks.k1.serializer.hincrbyKeySuffix=pv coin pv coin
a1.sinks.k1.serializer.hincrbyKeyCondition=${app}!~star ${app}!~star ${app}!~star ${app}!~star
#hincrbyField,hincrbyValue对应hincrbyKeySuffix
a1.sinks.k1.serializer.hincrbyField=${minute_field} ${minute_field} ${minute_field} ${minute_field}
a1.sinks.k1.serializer.hincrbyValue=1 ${total} 1 ${total}




# Use a channel which buffers events in memory
a1.channels.c1.type                = memory
a1.channels.c1.capacity            = 100
a1.channels.c1.transactionCapacity = 100


# Bind the source and sink to the channel
a1.sources.r1.channels = c1
a1.sinks.k1.channel    = c1
